@startuml

title __CONTROLLERS's Class Diagram__\n

  namespace src.controllers {
    class src.controllers.AttendeeController {
        ~ run()
        ~ signUpEvent()
        - browseEventsSignedUp()
        - cancelEvent()
        - sendMessages()
    }
  }
  

  namespace src.controllers {
    class src.controllers.BaseController {
        ~ load()
        ~ save()
    }
  }
  

  namespace src.controllers {
    class src.controllers.LoginController {
        ~ scanner : Scanner
        {static} + main()
        + run()
        - login()
    }
  }
  

  namespace src.controllers {
    class src.controllers.OrganizerController {
        ~ scanner : Scanner
        {static} + main()
        ~ run()
        - assignSpeakerToEvent()
        - assignSpeakerToMultipleEvents()
        - assignSpeakerToOneEvent()
        - createEvent()
        - createRoom()
        - createSpeaker()
        - sendMessages()
        - sendMessagesAllAttendees()
        - sendMessagesAllAttendeesSpecificEvent()
        - sendMessagesAllSpeakers()
        - sendMessagesAllUsers()
    }
  }
  

  namespace src.controllers {
    class src.controllers.SpeakerController {
        ~ scan : Scanner
        {static} + main()
        ~ browseMyEvents()
        ~ run()
        ~ sendMessages()
        - sendToAllAttendeesAllEvents()
        - sendToAllAttendeesOneEvent()
        - sendToOne()
    }
  }
  

  namespace src.controllers {
    abstract class src.controllers.UserController {
        ~ browseEvents()
        {abstract} ~ run()
        ~ viewMessages()
    }
  }
  

  src.controllers.AttendeeController -up-|> src.controllers.UserController
  src.controllers.LoginController -up-|> src.controllers.BaseController
  src.controllers.OrganizerController -up-|> src.controllers.UserController
  src.controllers.SpeakerController -up-|> src.controllers.UserController
  src.controllers.UserController -up-|> src.controllers.BaseController


@enduml
