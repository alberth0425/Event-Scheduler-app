ReadMe== Description ==Phase 1 is a program that allows different users to login and perform different actions. == Operation Instructions ==Quick Reminders:- All storage files are under the “storage” folder, and each different entities are stored in a separate file.- The delimiter is set as φα, ie, no message or username can contain φα.- Notice that if you have wrong performance, such as input a wrong username, then there would be an exceptioncorresponded showed below.Order of the elements in the storage files:- attendees.txt, speakers.txt, organizers.txt: user id, username, password, first name, last name.- rooms.txt: room number, capacity.- messages.txt: message id, text, sender username, receiver username, time stamp.- events.txt: event id, title, speaker id, starting time, room number, attendees id.Procedures need to follow:1. Enter the LoginController and click on the run button next to the main function to start the program.- This would start the program and you could see “Login  Username: ” in your console.2. Input the correct username and password in order to login in.(Notice that the username is already stored in the storage.)- For example if we click on the attendee.txt, we could see that one of the username is a02, which has correspondingpassword qwerasdf.3. After logged in as an attendee or organizer or speaker, we could see a list of actions we could perform.- For example, if we then input "1", then all the events the specific attendee signed up for would be print out in theconsole.4. If you want to perform another action, then just input another number produced for this specific user.5. After any action has been performed, click on the correct number for exit to exit the program.== Class Introduction ==Entities: Attendee: extends User class.          Event: contains this event's title, event id, room number, starting time, speaker id, all attendees' ids and          the total number of events.          Message: contains the text of this message, senderUsername, receiverUsername, time stamp, message's id and          the total number of messages.          Organizer: extends User class.          Room: contains the capacity of the room and its room number.          Savable: an interface that implements by all the other entities. Indicates an entity is savable.          Speaker: extends User class.          User: contains a user's id, username, password, first name, and last name.Use Cases: AuthService: contains all the authorization performances that related to changes to the user such as           login a user or get a specific user.           EventService: contains all actions on an event such as get all the events by speaker or by attendee.           MessageService: contains all actions related to send messages.           RoomService: contains all actions related to get or create rooms.           SignupService: not used in phase 1, but it is responsible for sign up an user for an event.== Current Maintainer ==Wenzhu YeWendy Yusi ChengYufan QianCheng KeQiwen HuaLei CaoYu Qi Huangshijia Ye